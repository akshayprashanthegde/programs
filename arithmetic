// Function to perform addition
function add(a, b)
 {
      return new Promise((resolve, reject) =>
       {
         setTimeout(() =>
            {
               if (typeof a !== 'number' || typeof b !== 'number')
                   {
                      reject(new Error('Invalid arguments. Please enter valid numbers.'));
                    }
              else
                   {
                     resolve(a + b);
                    }
            }, 1000); // adding a delay of 1 second using setTimeout()
        });
}
// Function to perform subtraction
function subtract(a, b)
 {
 return new Promise((resolve, reject) => {
 setTimeout(() =>
 {
 if (typeof a !== 'number' || typeof b !== 'number') {
 reject(new Error('Invalid arguments. Please enter valid numbers.'));
 } else
 {
 resolve(a - b);
 }
 }, 1500); // adding a delay of 1.5 seconds using setTimeout()
 });
}
// Function to perform multiplication
function multiply(a, b)
{
 return new Promise((resolve, reject) => {
 setTimeout(() => {
 if (typeof a !== 'number' || typeof b !== 'number')
  {
 reject(new Error('Invalid arguments. Please enter valid numbers.'));
 } else
 {
 resolve(a * b);
 }
 }, 2000); // adding a delay of 2 seconds using setTimeout()
 });
}
// Function to perform division
function divide(a, b)
{
 return new Promise((resolve, reject) => {
 setTimeout(() => {
 if (typeof a !== 'number' || typeof b !== 'number')
  {
 reject(new Error('Invalid arguments. Please enter valid numbers.'));
 } else if (b === 0)
 {
 reject(new Error('Division by zero is not allowed.'));
 } else
  {
 resolve(a / b);
 }
 }, 2500); // adding a delay of 2.5 seconds using setTimeout()
 });
}
// Calling the arithmetic functions using the promise objects and displaying theresult synchronously using the await keyword
async function performOperations(a, b)
{
 try
  {
 const sum = await add(a, b);
 console.log(`Sum: ${sum}`);
 const difference = await subtract(a, b);
 console.log(`Difference: ${difference}`);
 const product = await multiply(a, b);
 console.log(`Product: ${product}`);
 const quotient = await divide(a, b);
 console.log(`Quotient: ${quotient}`);
 }
  catch (err)
  {
 console.log(err.message);
 }
}
// Testing the performOperations function with sample arguments
performOperations(10, 5);










